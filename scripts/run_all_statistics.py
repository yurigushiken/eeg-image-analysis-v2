#!/usr/bin/env python
"""Run statistical analyses for all completed ERP analyses.

This script automatically discovers all subject_measurements.csv files
(generated by Phase 2A) and runs Phase 2B statistical analyses on each.

Usage:
    python scripts/run_all_statistics.py

Configuration:
    - Uses configs/statistics/default.yaml as the template
    - Automatically finds all subject_measurements.csv files
    - Creates output directories under docs/assets/stats/
"""
from __future__ import annotations

import os
import sys
import subprocess
from pathlib import Path
import tempfile
import yaml

# Get repo root
REPO_ROOT = Path(__file__).parent.parent
TABLES_DIR = REPO_ROOT / "docs" / "assets" / "tables"
STATS_TEMPLATE = REPO_ROOT / "configs" / "statistics" / "default.yaml"


def find_subject_measurements() -> list[tuple[str, Path]]:
    """
    Find all subject_measurements.csv files.

    Returns:
        List of (analysis_id, csv_path) tuples.
    """
    measurements = []

    if not TABLES_DIR.exists():
        return measurements

    for analysis_dir in TABLES_DIR.iterdir():
        if not analysis_dir.is_dir():
            continue

        csv_path = analysis_dir / "subject_measurements.csv"
        if csv_path.exists():
            analysis_id = analysis_dir.name
            measurements.append((analysis_id, csv_path))

    return sorted(measurements)


def create_temp_config(analysis_id: str, csv_path: Path, template_config: dict) -> Path:
    """
    Create a temporary config file for this analysis.

    Args:
        analysis_id: Analysis identifier (e.g., 'landing_on_2')
        csv_path: Path to subject_measurements.csv
        template_config: Loaded default.yaml config dict

    Returns:
        Path to temporary config file.
    """
    # Create a copy of the template
    config = template_config.copy()

    # Update paths for this specific analysis
    config['input_csv'] = str(csv_path)
    config['output_dir'] = f"docs/assets/stats/{analysis_id}"

    # Write to temporary file
    temp_file = tempfile.NamedTemporaryFile(
        mode='w',
        suffix='.yaml',
        delete=False,
        prefix=f'stats_{analysis_id}_'
    )

    yaml.dump(config, temp_file, default_flow_style=False, sort_keys=False)
    temp_file.close()

    return Path(temp_file.name)


def main() -> int:
    """Run statistical analyses for all available datasets."""

    # Load template configuration
    if not STATS_TEMPLATE.exists():
        print(f"ERROR: Template config not found: {STATS_TEMPLATE}")
        return 1

    with open(STATS_TEMPLATE, 'r') as f:
        template_config = yaml.safe_load(f)

    # Find all subject measurements
    measurements = find_subject_measurements()

    if not measurements:
        print(f"No subject_measurements.csv files found in {TABLES_DIR}")
        print("Run 'python scripts/run_all_analyses.py' first to generate data.")
        return 1

    print(f"Found {len(measurements)} analyses with subject measurements:")
    for analysis_id, csv_path in measurements:
        print(f"  - {analysis_id}")
    print()

    # Run statistics for each analysis
    failed = []
    temp_configs = []

    for i, (analysis_id, csv_path) in enumerate(measurements, 1):
        print(f"[{i}/{len(measurements)}] Running statistics: {analysis_id}")
        print("-" * 80)

        try:
            # Create temporary config for this analysis
            temp_config_path = create_temp_config(analysis_id, csv_path, template_config)
            temp_configs.append(temp_config_path)

            # Run statistics
            result = subprocess.run(
                [sys.executable, "scripts/run_statistics.py", "--config", str(temp_config_path)],
                cwd=REPO_ROOT,
                check=True,
                capture_output=False,  # Show output in real-time
            )
            print(f"[OK] {analysis_id} completed successfully\n")

        except subprocess.CalledProcessError as e:
            print(f"[FAILED] {analysis_id} FAILED with exit code {e.returncode}\n")
            failed.append(analysis_id)
            # Continue with other analyses even if one fails

        except Exception as e:
            print(f"[ERROR] {analysis_id}: {e}\n")
            failed.append(analysis_id)

    # Clean up temporary config files
    for temp_config in temp_configs:
        try:
            temp_config.unlink()
        except Exception:
            pass

    # Summary
    print("=" * 80)
    print("SUMMARY")
    print("=" * 80)
    print(f"Total analyses: {len(measurements)}")
    print(f"Successful: {len(measurements) - len(failed)}")
    print(f"Failed: {len(failed)}")

    if failed:
        print("\nFailed analyses:")
        for name in failed:
            print(f"  - {name}")
        return 1

    print("\n[OK] All statistical analyses completed successfully!")
    return 0


if __name__ == "__main__":
    sys.exit(main())
